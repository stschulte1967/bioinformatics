pub fn pattern_count(text: &str, pattern: &str) -> usize {
    let mut count = 0;
    let pattern_length = pattern.len();
    let text_length = text.len();

    for i in 0..=text_length - pattern_length {
        if &text[i..i + pattern_length] == pattern {
            count += 1;
        }
    }
    count
}

pub fn frequent_words(text: &str, k: usize) -> Vec<String> {
    let mut count_map = std::collections::HashMap::new();
    let text_length = text.len();

    for i in 0..=text_length - k {
        let pattern = &text[i..i + k];
        *count_map.entry(pattern.to_string()).or_insert(0) += 1;
    }

    let max_count = count_map.values().cloned().max().unwrap_or(0);
    count_map
        .into_iter()
        .filter(|&(_, count)| count == max_count)
        .map(|(pattern, _)| pattern)
        .collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test1_pattern_count() {
        let result = pattern_count("CGCGATACGTTACATACATGATAGACCGCGCGCGATCATATCGCGATTATC", "CGCG");
        assert_eq!(result, 5);
    }

    #[test]
    fn test2_pattern_count() {
        let result = pattern_count("GCGCG", "GCG");
        assert_eq!(result, 2);
    }

    #[test]
    fn test3_pattern_count() {
        let result = pattern_count("GGAGCGTCTGACAAACAAAGTTCTGAGCGTCTTGAGCGTCGAGCGTCTCATCTCGAGCGTCTAGACGAGCGTCTGAGCGTCTTGAGAGCGTCGAGCGTCTCGAGTGGAGCGTCTCCAGGCTGAGCGTCGAGCGTCCGAGCGTCGAGCGTCGAGCGTCAGAGCGTCGAGCGTCGGAGCGTCCAGTTCGAGCGTCGAGCGTCTGAGCGTCGCGAGCGTCGAGCGTCTGAGCGTCGAGCGTCGAGGATTTTGCCCAGGAGCGTCGGGAGCGTCAAGCTATCGAGCGTCTCGCAGCAGAGCGTCTAAAGAGCGTCGAGCGTCCGAGCGTCGAGCGTCTGAACCCCGAGCGTCGAGCGTCGAGAGCGTCGGGGGAGCGTCATGCTTGAGCGTCCCAAAAGAGCGTCGAGCGTCGAGCGTCGAGCGTCAGTTGGAGCGTCCGAGCGTCACGAGAGCGTCGAGCGTCACGGAGCGTCCGAGCGTCATTGAGCGTCCTGAGCGTCGAGCGTCTGAGCGTCGAGCGTCTAGGAGCGTCGGGAGCGTCGTGAGCGTCGAGGAGCGTCCCTAGAGCGTCTAAACCTCGAGCGTCTGAGCGTCTGAGCGTCCGTCGAGCGTCTGAGCGTCTGAGCGTCGGGAGCGTCTATGAGCGTCGAGCGTCATCGAGAGCGTCGTGAGCGTCGGAGCGTCCCGAGCGTCGAGCGTCTACGAGGAGCGTCAGAGCGTCAGAGCGTCGGAGCGTCGGCCCCAATGGAGCGTCGGTGAGCGTCGAGCGTCGAGCGTCTACGAGCGTCGGAGCGTCGAGCGTCATGAGCGTCGAGCGTCGAGCGTCGAGCGTCGAGCGTCGCTGAGCGTCAAGAGCGTCCCGAGCGTCCTTTGAGCGTCGAGCGTCTCTGAGCGTCGAAGAGCGTCGAGCGTCGAGCGTCACACCGAGCGTCGAGCGTCGGAGCGTCAGAGCGTCTGGAGCGTCTTAGTTGAGCGTCGAGCGTCGCGGAGCGTCAGAGCGTCTAGAGCGTCTGAAACCGAGACTAGGCCTTCCGAGCGTC", "GAGCGTCGA");
        assert_eq!(result, 36);
    }

    #[test]
    fn test1_frequent_words() {
        let result = frequent_words("ACTGACTCCCACCCC", 3);
        assert_eq!(result, vec!["CCC"]);
    }

    #[test]
    fn test2_frequent_words() {
        let result = frequent_words("ACGTTGCATGTCGCATGATGCATGAGAGCT", 4);
        //assert_eq!(result, vec!["GCAT", "CATG"] );
    }

    #[test]
    fn test3_frequent_words() {
        let result = frequent_words("ATCGGGCCGGTATCCATCGGGCCTGTCCAACGTCGCCATCGGGCCGGTATCCCGACACCGCGGTATCCCGTCGCCCGTCGCCCGACACCGATCGGGCCGGTATCCCGTCGCCATCGGGCCTGTCCAACTGTCCAACGGTATCCCGGTATCCCGTCGCCCTGTCCAACGGTATCCCGACACCGCGTCGCCCGTCGCCATCGGGCCGACACCGCTGTCCAACGACACCGATCGGGCCTGTCCAACGTCGCCCGGTATCCCTGTCCAAATCGGGCCGGTATCCCGTCGCCCTGTCCAACTGTCCAACTGTCCAACGGTATCCCGGTATCCCGGTATCCCTGTCCAACTGTCCAAATCGGGCCTGTCCAACGTCGCCCTGTCCAACGGTATCCCTGTCCAACGACACCGATCGGGCCTGTCCAAATCGGGCATCGGGCCGTCGCCCGACACCGCGTCGCCCGACACCGCGGTATCCCTGTCCAAATCGGGCCGACACCGCGTCGCCCGTCGCCATCGGGCCGACACCGCGACACCGCTGTCCAACTGTCCAACTGTCCAACTGTCCAAATCGGGCCGTCGCCCTGTCCAACGGTATCCCGGTATCCCGACACCGCTGTCCAACTGTCCAACGGTATCCCTGTCCAAATCGGGCCGGTATCCCGACACCGATCGGGCCTGTCCAACGTCGCCATCGGGCCGTCGCCCGACACCGCGGTATCCCGACACCGCGGTATCCCTGTCCAAATCGGGCCGTCGCCCTGTCCAAATCGGGCCGACACCGATCGGGCCTGTCCAAATCGGGCCTGTCCAACGACACCGCGACACCGCGGTATCC", 14);
        //assert_eq!(result, vec!["TGTCCAAATCGGGC", "CTGTCCAAATCGGG"] );
    }

    #[test]
    fn test4_frequent_words() {
        let result = frequent_words("GGAGCGTCTGACAAACAAAGTTCTGAGCGTCTTGAGCGTCGAGCGTCTCATCTCGAGCGTCTAGACGAGCGTCTGAGCGTCTTGAGAGCGTCGAGCGTCTCGAGTGGAGCGTCTCCAGGCTGAGCGTCGAGCGTCCGAGCGTCGAGCGTCGAGCGTCAGAGCGTCGAGCGTCGGAGCGTCCAGTTCGAGCGTCGAGCGTCTGAGCGTCGCGAGCGTCGAGCGTCTGAGCGTCGAGCGTCGAGGATTTTGCCCAGGAGCGTCGGGAGCGTCAAGCTATCGAGCGTCTCGCAGCAGAGCGTCTAAAGAGCGTCGAGCGTCCGAGCGTCGAGCGTCTGAACCCCGAGCGTCGAGCGTCGAGAGCGTCGGGGGAGCGTCATGCTTGAGCGTCCCAAAAGAGCGTCGAGCGTCGAGCGTCGAGCGTCAGTTGGAGCGTCCGAGCGTCACGAGAGCGTCGAGCGTCACGGAGCGTCCGAGCGTCATTGAGCGTCCTGAGCGTCGAGCGTCTGAGCGTCGAGCGTCTAGGAGCGTCGGGAGCGTCGTGAGCGTCGAGGAGCGTCCCTAGAGCGTCTAAACCTCGAGCGTCTGAGCGTCTGAGCGTCCGTCGAGCGTCTGAGCGTCTGAGCGTCGGGAGCGTCTATGAGCGTCGAGCGTCATCGAGAGCGTCGTGAGCGTCGGAGCGTCCCGAGCGTCGAGCGTCTACGAGGAGCGTCAGAGCGTCAGAGCGTCGGAGCGTCGGCCCCAATGGAGCGTCGGTGAGCGTCGAGCGTCGAGCGTCTACGAGCGTCGGAGCGTCGAGCGTCATGAGCGTCGAGCGTCGAGCGTCGAGCGTCGAGCGTCGCTGAGCGTCAAGAGCGTCCCGAGCGTCCTTTGAGCGTCGAGCGTCTCTGAGCGTCGAAGAGCGTCGAGCGTCGAGCGTCACACCGAGCGTCGAGCGTCGGAGCGTCAGAGCGTCTGGAGCGTCTTAGTTGAGCGTCGAGCGTCGCGGAGCGTCAGAGCGTCTAGAGCGTCTGAAACCGAGACTAGGCCTTCCGAGCGTC", 14);
        //assert_eq!(result, vec!["TGTCCAAATCGGGC", "CTGTCCAAATCGGG"] );
    }    
}
